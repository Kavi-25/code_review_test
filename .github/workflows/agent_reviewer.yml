name: PR Agent (Gemini)
on:
  pull_request:
    types: [opened, reopened, ready_for_review]
  issue_comment:
jobs:
  pr_agent_job:
    if: ${{ github.event.sender.type != 'Bot' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    steps:
      - name: PR Agent action step
        uses: qodo-ai/pr-agent@main
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
          config.model: "gemini/gemini-1.5-flash"
          config.fallback_models: '["gemini/gemini-1.5-flash"]'
          GOOGLE_AI_STUDIO.GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          github_action_config.auto_review: "true"
          github_action_config.auto_describe: "true"
          github_action_config.auto_improve: "true"

          github_action_config.review_instructions: |
            - Ensure all Python functions include type hints for parameters and return types.
            - Check for adherence to PEP 8 style guidelines.
            - Flag any hardcoded credentials or sensitive information (e.g., API keys, passwords).
            - Suggest improvements for code readability, such as breaking down complex functions.
            - Provide a summary of the PR's impact on the codebase.
            - Enforce the DRY principle by identifying and flagging repeated code patterns that can be refactored into functions or modules.
            - Ensure adherence to OOP principles, such as proper use of classes, encapsulation, inheritance, and polymorphism where applicable.
          github_action_config.description_instructions: |
            - Generate a concise summary of the changes, including the purpose of the PR.
            - List any dependencies or prerequisites (e.g., required libraries or environment setup).
            - Highlight potential risks or areas needing further testing.
          github_action_config.improve_instructions: |
            - Suggest adding type hints to Python functions missing them.
            - Recommend refactoring functions longer than 50 lines into smaller, modular functions.
            - Propose adding unit tests for new or modified functionality.
            - Suggest optimizations for performance-critical code paths.
            - Propose refactoring repeated code to adhere to the DRY principle, such as extracting common logic into reusable functions or classes.
            - Recommend restructuring code to follow OOP principles, including better use of classes, proper encapsulation, and leveraging inheritance or polymorphism where appropriate.

          PR_REVIEWER__PERSISTENT_COMMENT: "true"
